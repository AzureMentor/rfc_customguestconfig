variables:
- group: vmusers

pool: 'Hosted VS2017'

steps:
- task: AzurePowerShell@3
  displayName: 'Publish Azure Policy definition for DeployIfNotExists rule'
  inputs:
    azureSubscription: 'ARM'
    azurePowerShellVersion: 'latestVersion'
    scriptType: 'inlineScript'
    inline: |
      Update-Module 'AzureRM.Resources' -AllowPreRelease -Force -verbose
      Get-Help New-AzureRmPolicyAssignment -detailed

      $deployIfNotExists = @{
        Name           = '852a2bc9-9a15-446e-a19b-d5b29e60a52a'
        DisplayName    = '[CCD_CustomGuestConfig]: Deploy extension to audit passwd file permissions'
        Description    = 'Custom Deploy if Not Exists rule to add VM extension, MSI, and guest assignment.'
        SubscriptionId = '$(SubscriptionID)'
        Mode           = 'Indexed'
        Policy         = "$(Build.SourcesDirectory)\customPolicyFiles\deployIfNotExists.rules.json"
        Metadata       = "$(Build.SourcesDirectory)\customPolicyFiles\deployIfNotExists.metadata.json"
        }
      New-AzureRMPolicyDefinition @deployIfNotExists
      
      $auditIfNotExists = @{
        Name           = '3f6f3c70-1f39-4e6d-9ecc-8e1f377772f9'
        DisplayName    = '[CCD_CustomGuestConfig]: Audit passwd file permissions'
        Description    = 'Custom Audit if Not Exists rule to validate /etc/passwd file permissions are set to 0644.'
        SubscriptionId = '$(SubscriptionID)'
        Mode           = 'Indexed'
        Policy         = "$(Build.SourcesDirectory)\customPolicyFiles\auditIfNotExists.rules.json"
        Metadata       = "$(Build.SourcesDirectory)\customPolicyFiles\auditIfNotExists.metadata.json"
        }
      New-AzureRMPolicyDefinition @auditIfNotExists

      #workaround
      (get-content '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json').replace('subscriptionID','$(subscriptionID)') | set-content '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json' -force

      $policySet = @{
        Name             = 'cd77b2bc-4d28-4321-975a-0d3f95ed2b56'
        DisplayName      = '[CCD_CustomGuestConfig]: Onboard and Audit custom guest configuration'
        Description      = 'CD/CD solution for custom guest config validation.'
        SubscriptionId   = '$(SubscriptionID)'
        PolicyDefinition = '$(Build.SourcesDirectory)\customPolicyFiles\initiative.rules.json'
        Metadata         = '$(Build.SourcesDirectory)\customPolicyFiles\initiative.metadata.json'
      }
      New-AzureRmPolicySetDefinition @policySet
      
      $ResourceGroup = Get-AzureRmResourceGroup -Name 'contosodev-ccd_customguestconfig'
      $initiative = Get-AzureRmPolicySetDefinition -Name 'cd77b2bc-4d28-4321-975a-0d3f95ed2b56'
      
      $assignment = @{
        Name = '0d39c29a-135f-4137-b6a8-bcabea6095bb'
        DisplayName = '[CCD_CustomGuestConfig]: Functional validation for custom guest configuration'
        Description = 'Assigns an initiative that includes both the deploy and audit policies required for a custom guest configuration'
        PolicySetDefinition = $initiative
        Scope = $ResourceGroup.ResourceId
        Location = 'eastus2'
        AssignIdentity = $true
      }
      New-AzureRmPolicyAssignment @assignment

- task: AzureResourceGroupDeployment@2
  displayName: "Deploy virtual machine to Azure"
  inputs:
    azureSubscription: 'ARM'
    resourceGroupName: 'contosodev-ccd_customguestconfig'
    type: 'Complete'
    location: 'eastus2'
    csmFile: deploy.json
    overrideParameters: '-adminUsername $(adminUsername) -adminPassword $(adminPassword)'
